import React, { useEffect, useState } from 'react';
import EditRecipeModal from './EditRecipeModal';
import CommentSection from './CommentSection';
import RecipeIngredients from './RecipeIngredients';

const RecipeList = () => {
    const [recipes, setRecipes] = useState([]);
    const [currentUser, setCurrentUser] = useState(null);
    const [error, setError] = useState('');
    const [editingRecipe, setEditingRecipe] = useState(null);

    const token = localStorage.getItem('accessToken');

    useEffect(() => {
        if (!token) return;

        fetch('https://erko123.pythonanywhere.com/api/v1/auth/user/', {
            headers: { Authorization: `Bearer ${token}` }
        })
            .then(res => res.json())
            .then(data => setCurrentUser(data))
            .catch(() => {
                setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                setCurrentUser(null);
            });
    }, [token]);

    const fetchRecipes = () => {
        fetch('https://erko123.pythonanywhere.com/api/v1/recipes/')
            .then(res => res.json())
            .then(data => setRecipes(data.results || []))
            .catch(() => setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'));
    };

    useEffect(() => {
        fetchRecipes();
    }, []);

    const handleDelete = async (id) => {
        if (!token) return alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');

        const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç?');
        if (!confirmed) return;

        const res = await fetch(`https://erko123.pythonanywhere.com/api/v1/recipes/${id}/`, {
            method: 'DELETE',
            headers: { Authorization: `Bearer ${token}` }
        });

        if (res.ok) {
            setRecipes(prev => prev.filter(r => r.id !== id));
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
    };

    const handleBuyIngredients = async (recipeId, ingredients) => {
        if (!token || !currentUser?.id) return alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');

        const shoppingListId = currentUser.id; // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º user.id –∫–∞–∫ shopping_list_id

        try {
            for (const ing of ingredients) {
                await fetch('https://erko123.pythonanywhere.com/api/v1/shopping-list/items/', {
                    method: 'POST',
                    headers: {
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        shopping_list_id: shoppingListId,
                        ingredient_id: ing.ingredient.id,
                        recipe_id: recipeId,
                        quantity: ing.quantity,
                        unit: ing.unit
                    })
                });
            }

            alert('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!');
        } catch (err) {
            console.error(err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤');
        }
    };

    if (error) return <p className="text-red-500">{error}</p>;

    return (
        <div className="max-w-3xl mx-auto mt-6">
            <h2 className="text-xl font-semibold mb-4">üìã –†–µ—Ü–µ–ø—Ç—ã</h2>

            {!currentUser ? (
                <p className="text-gray-600">–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.</p>
            ) : (
                <>
                    {recipes.length === 0 && <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤</p>}
                    {recipes.map(recipe => {
                        const isAuthor = recipe.author === currentUser.email;

                        return (
                            <div key={recipe.id} className="p-4 border border-gray-200 rounded-lg mb-6 shadow-sm bg-white">
                                <h3 className="text-lg font-bold">{recipe.title}</h3>
                                <p className="mb-1">{recipe.description}</p>
                                <p className="text-sm text-gray-600">
                                    <strong>–ê–≤—Ç–æ—Ä:</strong> {recipe.author}
                                </p>

                                {/* –ö—É–ø–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã */}
                                <button
                                    className="text-green-600 hover:underline text-sm my-2"
                                    onClick={() => handleBuyIngredients(recipe.id, recipe.recipe_ingredients || [])}
                                >
                                    üõí –ö—É–ø–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                                </button>

                                {/* –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ */}
                                {isAuthor && (
                                    <div className="mt-2 space-x-2">
                                        <button
                                            className="text-blue-600 hover:underline"
                                            onClick={() => setEditingRecipe(recipe)}
                                        >
                                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                        </button>
                                        <button
                                            className="text-red-600 hover:underline"
                                            onClick={() => handleDelete(recipe.id)}
                                        >
                                            üóë –£–¥–∞–ª–∏—Ç—å
                                        </button>
                                    </div>
                                )}

                                <RecipeIngredients recipeId={recipe.id} isAuthor={isAuthor} />
                                <CommentSection recipeId={recipe.id} />
                            </div>
                        );
                    })}
                </>
            )}

            {editingRecipe && (
                <EditRecipeModal
                    recipe={editingRecipe}
                    onClose={() => setEditingRecipe(null)}
                    onUpdated={() => {
                        setEditingRecipe(null);
                        fetchRecipes();
                    }}
                />
            )}
        </div>
    );
};

export default RecipeList;
