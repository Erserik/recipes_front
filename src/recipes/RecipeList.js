import React, { useEffect, useState } from 'react';
import EditRecipeModal from './EditRecipeModal';
import CommentSection from './CommentSection';
import RecipeIngredients from './RecipeIngredients';

const RecipeList = () => {
    const [recipes, setRecipes] = useState([]);
    const [currentUserEmail, setCurrentUserEmail] = useState('');
    const [error, setError] = useState('');
    const [editingRecipe, setEditingRecipe] = useState(null);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const token = localStorage.getItem('accessToken');
        if (token) {
            fetch('https://erko123.pythonanywhere.com/api/v1/auth/user/', {
                headers: { Authorization: `Bearer ${token}` }
            })
                .then(res => res.json())
                .then(data => setCurrentUserEmail(data.email))
                .catch(() => setCurrentUserEmail(''));
        }
    }, []);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
    const fetchRecipes = () => {
        fetch('https://erko123.pythonanywhere.com/api/v1/recipes/')
            .then(res => res.json())
            .then(data => setRecipes(data.results || []))
            .catch(() => setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'));
    };

    useEffect(() => {
        fetchRecipes();
    }, []);

    const handleDelete = async (id) => {
        const token = localStorage.getItem('accessToken');
        if (!token) return alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');

        const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç?');
        if (!confirmed) return;

        const res = await fetch(`https://erko123.pythonanywhere.com/api/v1/recipes/${id}/`, {
            method: 'DELETE',
            headers: {
                Authorization: `Bearer ${token}`
            }
        });

        if (res.ok) {
            setRecipes(prev => prev.filter(r => r.id !== id));
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
    };

    if (error) return <p className="text-red-500">{error}</p>;

    return (
        <div className="max-w-3xl mx-auto mt-6">
            <h2 className="text-xl font-semibold mb-4">üìã –†–µ—Ü–µ–ø—Ç—ã</h2>
            {recipes.length === 0 && <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤</p>}
            {recipes.map(recipe => {
                const isAuthor = recipe.author === currentUserEmail;

                return (
                    <div key={recipe.id} className="p-4 border border-gray-200 rounded-lg mb-6 shadow-sm bg-white">
                        <h3 className="text-lg font-bold">{recipe.title}</h3>
                        <p className="mb-1">{recipe.description}</p>
                        <p className="text-sm text-gray-600">
                            <strong>–ê–≤—Ç–æ—Ä:</strong> {recipe.author}
                        </p>

                        {/* –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ */}
                        {isAuthor && (
                            <div className="mt-2 space-x-2">
                                <button
                                    className="text-blue-600 hover:underline"
                                    onClick={() => setEditingRecipe(recipe)}
                                >
                                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                                <button
                                    className="text-red-600 hover:underline"
                                    onClick={() => handleDelete(recipe.id)}
                                >
                                    üóë –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        )}

                        {/* –°–µ–∫—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
                        <RecipeIngredients recipeId={recipe.id} isAuthor={isAuthor} />

                        {/* –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
                        <CommentSection recipeId={recipe.id} />
                    </div>
                );
            })}

            {/* –ú–æ–¥–∞–ª–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {editingRecipe && (
                <EditRecipeModal
                    recipe={editingRecipe}
                    onClose={() => setEditingRecipe(null)}
                    onUpdated={() => {
                        setEditingRecipe(null);
                        fetchRecipes();
                    }}
                />
            )}
        </div>
    );
};

export default RecipeList;
